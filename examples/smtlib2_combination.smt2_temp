

( set-option :produce-models true )
( set-option :opt.priority box )
( set-logic QF_LIA )
( declare-fun production_cost (  ) Real )
( declare-fun q0 (  ) Real )           
( declare-fun q1 (  ) Real ) 
( declare-fun q2 (  ) Real ) 
( declare-fun q3 (  ) Real )
( declare-fun m0 (  ) Bool )           
( declare-fun m1 (  ) Bool )
( declare-fun m2 (  ) Bool )
( declare-fun m3 (  ) Bool )
( assert ( <= 1100.0 ( + q0 q1 q2 q3 ) ) ) 
( assert ( and                       
    ( and ( <= 0.0 q0 ) ( <= q0 800.0 ) ) ( and ( <= 0.0 q1 ) ( <= q1 500.0 ) )
    ( and ( <= 0.0 q2 ) ( <= q2 600.0 ) ) ( and ( <= 0.0 q3 ) ( <= q3 200.0 ) )
 ) )
( assert ( and                       
    ( => ( < 0.0 q0 ) m0 ) ( => ( < 0.0 q1 ) m1 )
    ( => ( < 0.0 q2 ) m2 ) ( => ( < 0.0 q3 ) m3 )
 ) )

;declaration of additional variable for assert-soft

( declare-fun used_machines (  ) Real )
( assert-soft ( not m0 ) :id used_machines )
( assert-soft ( not m1 ) :id used_machines )
( assert-soft ( not m2 ) :id used_machines )
( assert-soft ( not m3 ) :id used_machines )

( minimize 
    ( + ( * q0 8.0 ) ( * q1 9.0 ) ( * q2 9.0 ) ( * q3 5.0 ) ) 
    :id production_cost
 )
( minimize ( + production_cost 
             ( * ( / 785.0 10.0 ) ( + ( * 2.0 used_machines ) 8.0 ) )
           )
          :id total_cost
 ) 



( check-sat )
( get-objectives )

( set-model 1.0 )
( get-value ( total_cost ) )
( get-value ( used_machines ) )
( get-value ( m0 ) )
( get-value ( m1 ) )
( get-value ( m2 ) )
( get-value ( m3 ) )
( exit )
